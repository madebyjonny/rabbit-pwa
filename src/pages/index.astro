---
import Layout from "../layouts/Layout.astro";
---

<Layout title='Rabbit"'>
  <video id="rabbit" class="video" loop playsinline="true">
    <source src="/rabbit.mp4" type="video/mp4" />
    <source src="/rabbit.webm" type="video/webm" />
  </video>
  <section id="messages" class="messages"></section>
  <button id="ctrl-voice" data-loading="false">
    <span class="btn-content">Ask</span>
    <div class="loader">
      <span class="dot"></span>
      <span class="dot"></span>
      <span class="dot"></span>
    </div>
  </button>
</Layout>

<style is:global>
  .video {
    max-width: 50%;
  }
  .messages {
    width: 70%;
    margin: 0 auto;
    color: #fefdfe;
    gap: 8px;
    height: 70px;
    font-size: 24px;
  }
  .loader {
    display: flex;
    gap: 4px;
  }
  button[data-loading="true"] .loader {
    display: flex;
  }
  button[data-loading="true"] .btn-content {
    display: none;
  }
  button[data-loading="false"] .loader {
    display: none;
  }
  button[data-loading="false"] .btn-content {
    display: flex;
  }
  .dot {
    display: flex;
    height: 7px;
    width: 7px;
    transform: translateY(5px);
    border-radius: 100px;
    background-color: #fefdfe;
    animation-delay: 1;
    animation: upDown 1.5s ease-in-out infinite;
  }
  .dot:nth-child(2) {
    animation-delay: 0.5s; /* Delay the animation for the second child by 0.5s */
  }

  .dot:nth-child(3) {
    animation-delay: 1s; /* Delay the animation for the third child by 1s */
  }

  button {
    display: flex;
    height: 48px;
    min-width: 170px;
    color: #fff;
    background-color: transparent;
    border-radius: 16px;
    border: 1px solid #fff;
    align-items: center;
    justify-content: center;
  }

  .sentence {
    overflow: hidden;
    min-height: 100px;
  }

  .word {
    display: inline-block;
    opacity: 0;
    transform: translateY(20px);
    animation: appear 1.5s ease-in-out forwards;
  }

  @keyframes upDown {
    0% {
      transform: translateY(5px);
    }
    50% {
      transform: translateY(-5px);
    }
    100% {
      transform: translateY(5px);
    }
  }

  @keyframes appear {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }
</style>

<script>
  // @ts-ignore
  const recognition = new webkitSpeechRecognition();
  recognition.continuous = true;
  recognition.interimResults = true;
  recognition.lang = "en-US";

  const button = document.querySelector("#ctrl-voice") as HTMLButtonElement;
  const video = document.querySelector("#rabbit") as HTMLVideoElement;
  const messages = document.querySelector("#messages") as HTMLDivElement;

  button.addEventListener("click", () => {
    recognition.start();
    video.play();
    button.dataset.loading = "true";
  });

  recognition.onresult = async function (event: any) {
    const transcript = event.results[0][0].transcript;
    if (event.results[0].isFinal) {
      console.log("You said: " + transcript);
      recognition.stop();
      const data = await fetch("/api/ask", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ query: transcript }),
      });

      const result = await data.json();

      var to_speak = new SpeechSynthesisUtterance(result.answer);
      speechSynthesis.cancel();
      window.speechSynthesis.speak(to_speak);

      const answer = result.answer.split(" ");
      messages.innerHTML = "";
      answer.forEach((item: string, index: number) => {
        messages.innerHTML += `<span class="word" style="animation-delay:${index * 0.2}s;">${item}</span> `;
      });

      button.dataset.loading = "false";
      video.pause();
      return;
    }
  };

  recognition.onerror = function (event: any) {
    console.log("Error occurred: " + event.error);
  };

  recognition.onend = function () {
    console.log("<br>Speech recognition ended.");
  };
</script>
